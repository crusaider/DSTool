<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.momab.dstool</groupId>
    <artifactId>dstool</artifactId>
    <version>0.1.1</version>
    <packaging>pom</packaging>
    <name>DSTool</name>
    <prerequisites>
        <maven>3.1</maven>
    </prerequisites>
    <modules>
        <module>dstool-cli</module>
        <module>dstool-jar</module>
    </modules>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <organization>
        <name>Morik Online Management AB</name>
        <url>http://momab.se</url>
    </organization>
    <description>A set of java classes that can be used as is or from a command line to download, upload and delete Google Appengine Datastore entities trough the remote API.

        Using the GAE Data Store Remote API this tool is able to:

        Download all entities of a kind from a remote app engine application and either store it in local file our write it to stdout.
        Upload entities stored in a local file or read them fom stdin to a remote app engine application.
        Delete all entities of a kind from a remote app engine application.</description>
    <issueManagement>
        <system>Github</system>
        <url>https://github.com/crusaider/DSTool/issues</url>
    </issueManagement>
    <inceptionYear>2014</inceptionYear>
    <build>
        <plugins>
            <plugin>
                <groupId>com.atlassian.maven.plugins</groupId>
                <artifactId>maven-jgitflow-plugin</artifactId>
                <version>1.0-alpha27</version>
                <configuration>
                    <!-- Enable this to push to origin using SSH keys -->
                    <enableSshAgent>true</enableSshAgent>
                    <!-- Keep your maven submodules at the same version as the parent POM -->
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <!--
                      Pusing in-development features to origin allows all devs to see what each other
                      are working on
                    -->
                    <pushFeatures>true</pushFeatures>
                    <!--
                      This allows the CI server (e.g. Jenkins) to automatically push new releases to
                      origin; you can then either manually deploy them or, if you are doing Continuous
                      Deployments, auto-deploy them to prod
                    -->
                    <pushReleases>true</pushReleases>
                    <!--
                      Hot Fixes should be pushed to origin as well so that any dev can pick them up
                    -->
                    <pushHotfixes>true</pushHotfixes>
                    <!--
                      Prevents deployments from dev workstations so that they can be done by a CI
                      server
                    -->
                    <noDeploy>true</noDeploy>
                    <flowInitContext>
                        <!--
                          You can customize your development branch name. Why? Because it's faster to type
                          'git push origin dvlp'
                          than
                          'git push origin develop'
                          ;-)
                        -->
                        <developBranchName>develop</developBranchName>
                        <!-- You can also customize your tag prefixes -->
                        <versionTagPrefix>rel-</versionTagPrefix>
                    </flowInitContext>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>